import java.util.Scanner;

class Commodity{
    int piece;//购买数量
    int price;//购买价格
}
public class A {
    private static int MAXCODE = 999;//商品编码的最大值
    private static int SALECOMB = 99;//优惠商品组合数
    private static int KIND = 5;     //商品种类
    private static int QUANTITY = 5; //购买某种商品数量的最大值

    private static int b;//购买商品种类数
    private static int s;//当前优惠组合数
    private static int[] num = new int[MAXCODE+1];//记录商品编码与商品种类的对应关系
    private static int[] product = new int[KIND+1];//记录不同种类商品的购买数量
    private static int[][] offer = new int[SALECOMB+1][KIND+1];//offer[i][j]: 商品组合的优惠价(j=0)；某种优惠组合中某种商品需要购买的数量(j>0)
    private static Commodity[] purch = new Commodity[KIND+1];//记录不同商品的购买数量和购买价格
    private static int[][][][][] cost = new int[QUANTITY+1][QUANTITY+1][QUANTITY+1][QUANTITY+1][QUANTITY+1];//记录本次购买的总花费
    public static void main(String[] args){
        init();//对数据进行初始化
        comp(1);//对商品进行动态规划 
        out();//输出

    }
    
    private static void minicost(){
        int i,j,k,m,n,p,minm;
        minm = 0;
        for(i=1; i<=b; i++)//以单价购买最贵
            minm += product[i]*purch[i].price;
        
        for(p=1; p<=s; p++)//优惠方案种数
        { i = product[1] - offer[p][1];//还需要买的商品数量
        j = product[2] - offer[p][2];
        k = product[3] - offer[p][3];
        m = product[4] - offer[p][4];
        n = product[5] - offer[p][5];
        
        
        if(i>=0 && j>=0 && k>=0 && m>=0 && n>=0 && cost[i][j][k][m][n]+offer[p][0] < minm)
        	minm = cost[i][j][k][m][n] + offer[p][0];//更新最优值
    }
    cost[product[1]][product[2]][product[3]][product[4]][product[5]] = minm;}
    private static void init(){
        Scanner input = new Scanner(System.in);
        int i,j,n,p,t,code;
        for(i=0; i<100; i++)
            for(j=0; j<6; j++)
                offer[i][j] = 0;//初始化不同商品组合的优惠价
        
        for(i=0; i<6; i++){
            purch[i] = new Commodity();
            purch[i].piece = 0;
            purch[i].price = 0;//对不同商品的购买数量和购买价格进行初始化
            product[i] = 0;//对不同种类商品的数量进行初始化
        }
        b = input.nextInt();//输入购买商品种类数
        for(i=1; i<=b; i++){
            code = input.nextInt();//输入商品编码
            purch[i].piece = input.nextInt();//输入商品的数量
            purch[i].price = input.nextInt();//输入商品的价格
            num[code] = i;//记录商品编码与商品种类的对应关系
        }
        s = input.nextInt();//输入当前优惠组合数
        for(i=1; i<=s; i++){
            t = input.nextInt();//输入有多少商品的组合
            for(j=1; j<=t; j++){
            	n = input.nextInt();//输入商品编码
                p = input.nextInt();//输入购买数量
                offer[i][num[n]] = p;//某种优惠组合中某种商品需要购买的数量
            }offer[i][0] = input.nextInt();//记录商品组合的优惠价
        }
    }
    
    private static void comp(int i){//迭代计算
        if(i > b){//说明B种商品的product[]已经确定
            minicost();
            return;
            }
        for(int j=0; j<=purch[i].piece; j++){
            product[i] = j;//第i种商品取值范围为[0，purch[i]]
            comp(i+1);//第i+1种商品
        }
    }
    private static void out(){
        System.out.println(cost[product[1]][product[2]][product[3]][product[4]][product[5]]);
    }
        

}
/*
cost(a,b,c,d,e)表示购买商品组合(a,b,c,d,e)所需的最少费用
A[K], B[K], C[K], D[K], E[K]表示第K种商品优惠组合方案
offer(K)是第K种优惠组合方案的价格
coat(a,b,c,d,e) = cost(a-A[K], b-B[K], c-C[K], d-D[K], e-E[K]) + offer(K)
*/
